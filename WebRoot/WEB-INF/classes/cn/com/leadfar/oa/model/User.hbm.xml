<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="cn.com.leadfar.oa.model.User" table="t_user">
		<id name="id">
			<generator class="foreign">
				<param name="property">person</param>
			</generator>
		</id>
		<property name="username" unique="true"/>		
		<property name="password"/>
		<one-to-one name="person" constrained="true"/><!-- constrained（约束） constrained默认值为false  -->
		<!-- constrained只能在one-to-one的映射中使用，（一般在主表的映射中，有外键的那个表）。
		 如果constrained=true， 则表明存在外键与关联表对应，并且关联表中肯定存在对应的键与其对应，
		 另外该选项最关键的是影响save和delete的先后顺序。例如增加的时候，如果constainted=true,则会先增加关联表，然后增加本表。 删除的时候反之。 -->
		 
		 <!-- inverse="true" 代表对方进行维护关系
		  -->
		<set name="usersRoles" inverse="true" lazy="extra" cascade="delete">
			<key column="userId"/>
			<one-to-many class="cn.com.leadfar.oa.model.UsersRoles"/>
		</set>
		<!-- 保持集合上的lazy的默认值，此时的效果和lazy="extra"是基本一样的。
		* 设置集合上的lazy=extra,此时的效果和lazy属性的默认值是基本一样的。但是推荐使用这个属性值，因为在统计时这种情况显得比较智能。当然延迟是有效果的。
		* 设置集合上的lazy=false
		true:默认取值，它的意思是只有在调用这个集合获取里面的元素对象时，才发出查询语句，加载其集合元素的数据
		false:取消懒加载特性，即在加载对象的同时，就发出第二条查询语句加载其关联集合的数据
		extra:一种比较聪明的懒加载策略，即调用集合的size/contains等方法的时候，hibernate
		并不会去加载整个集合的数据，而是发出一条聪明的SQL语句，以便获得需要的值，只有在真正需要用到这些集合元素对象数据的时候，才去发出查询语句加载所有对象的数据
		 -->
		 
	</class>
</hibernate-mapping>